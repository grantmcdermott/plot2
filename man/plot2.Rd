% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot2.R
\name{plot2}
\alias{plot2}
\alias{plot2.default}
\alias{plot2.formula}
\alias{plot2.density}
\title{Lightweight extension of the base R plotting function}
\usage{
plot2(x, ...)

\method{plot2}{default}(
  x,
  y = NULL,
  by = NULL,
  data = NULL,
  type = "p",
  xlim = NULL,
  ylim = NULL,
  log = "",
  main = NULL,
  sub = NULL,
  xlab = NULL,
  ylab = NULL,
  ann = par("ann"),
  axes = TRUE,
  frame.plot = axes,
  asp = NA,
  grid = NULL,
  palette = NULL,
  legend = NULL,
  pch = NULL,
  col = NULL,
  lty = NULL,
  par_restore = FALSE,
  ymin = NULL,
  ymax = NULL,
  ...
)

\method{plot2}{formula}(
  x = NULL,
  data = parent.frame(),
  type = "p",
  xlim = NULL,
  ylim = NULL,
  main = NULL,
  sub = NULL,
  xlab = NULL,
  ylab = NULL,
  ann = par("ann"),
  axes = TRUE,
  frame.plot = axes,
  asp = NA,
  grid = NULL,
  pch = NULL,
  col = NULL,
  lty = NULL,
  par_restore = FALSE,
  formula = NULL,
  subset = NULL,
  na.action = NULL,
  drop.unused.levels = TRUE,
  ...
)

\method{plot2}{density}(
  x = NULL,
  by = NULL,
  type = "l",
  xlim = NULL,
  ylim = NULL,
  main = NULL,
  sub = NULL,
  xlab = NULL,
  ylab = NULL,
  ann = par("ann"),
  axes = TRUE,
  frame.plot = axes,
  asp = NA,
  grid = NULL,
  pch = NULL,
  col = NULL,
  lty = NULL,
  par_restore = FALSE,
  ...
)
}
\arguments{
\item{x, y}{the x and y arguments provide the x and y coordinates for the
plot. Any reasonable way of defining the coordinates is acceptable. See
the function xy.coords for details. If supplied separately, they must be
of the same length.}

\item{...}{other `graphical` parameters (see `par` and also the "Details"
section of `plot`).}

\item{by}{the grouping variable that you want to categorize (i.e., colour)
the plot by.}

\item{data}{a data.frame (or list) from which the variables in formula
should be taken. A matrix is converted to a data frame.}

\item{type}{character string giving the type of plot desired. Options are:
 - The same set of 1-character values supported by plot: "p" for points, "l"
for lines, "b" for both points and lines, "c" for empty points joined by
lines, "o" for overplotted points and lines, "s" and "S" for stair steps
and "h" for histogram-like vertical lines. "n" does not produce
any points or lines.
- Additional plot2 types: "pointrange" draws point range plots and
"errorbar" draws error bar plots.}

\item{xlim}{the x limits (x1, x2) of the plot. Note that x1 > x2 is allowed
and leads to a ‘reversed axis’. The default value, NULL, indicates that
the range of the `finite` values to be plotted should be used.}

\item{ylim}{the y limits of the plot.}

\item{log}{a character string which contains "x" if the x axis is to be
logarithmic, "y" if the y axis is to be logarithmic and "xy" or "yx" if 
both axes are to be logarithmic.}

\item{main}{a main title for the plot, see also `title`.}

\item{sub}{a subtitle for the plot.}

\item{xlab}{a label for the x axis, defaults to a description of x.}

\item{ylab}{a label for the y axis, defaults to a description of y.}

\item{ann}{a logical value indicating whether the default annotation (title
and x and y axis labels) should appear on the plot.}

\item{axes}{a logical value indicating whether both axes should be drawn on
the plot. Use `graphical parameter` "xaxt" or "yaxt" to suppress just one of
the axes.}

\item{frame.plot}{a logical indicating whether a box should be drawn around
the plot.}

\item{asp}{the y/xy/x aspect ratio, see `plot.window`.}

\item{grid}{a panel grid plotting function like `grid()`. This argument
replaces the `panel.first` and `panel.last` arguments from base `plot()`
and tries to make the process more seemless with better default behaviour.}

\item{palette}{one of the following options:
- NULL (default), in which case the palette will be determined by the
number of groups. If this number is equal to 8 or less, then R's default
("R4") colour palette will be used. For larger group numbers, the
"Viridis" palette will be used instead.
- A convenience string corresponding to one of the many palettes listed by
either `palette.pals()` or `hcl.pals()`. Note that the string can be
case-insensitive (e.g., "Okabe-Ito" and "okabe-ito" are both valid).
- A palette-generating function. This can be "bare" (e.g.,
`palette.colors`) or "closed" with a set of named arguments (e.g.,
`palette.colors(palette = "Okabe-Ito", alpha = 0.5)`). Note that any
unnamed arguments will be ignored and the key `n` argument, denoting the
number of colours, will automatically be spliced in as the number of
groups.}

\item{legend}{one of the following options:
- NULL (default), in which case the legend will be determined by the
grouping variable. If there is no group variable (i.e., `by` is NULL) then
no legend is drawn. If a grouping variable is detected, then an automatic
legend is drawn to the _outer_ right of the plotting area. Note that the
legend title and categories will automatically be inferred from the `by`
argument and underlying data.
- A convenience string indicating the legend position. The string should
correspond to one of the position keywords supported by the base `legend`
function, e.g. "right", "topleft", "bottom", etc. In addition, `plot2`
supports adding a trailing exclamation point to these keywords, e.g.
"right!", "topleft!", or "bottom!". This will place the legend _outside_
the plotting area and adjust the margins of the plot accordingly. Finally,
users can also turn off any legend printing by specifying "none".
- Logical value, where TRUE corresponds to the default case above (same 
effect as specifying NULL) and FALSE turns the legend off (same effect as
specifying "none").
- A list or, equivalently, a dedicated `legend()` function with supported
legend arguments, e.g. "bty", "horiz", and so forth.}

\item{pch}{plotting "character", i.e., symbol to use. Character, integer, or
vector of length equal to the number of categories in the `by` variable.
See `pch`. In addition, users can supply a special `pch = "by"` convenience
argument, in which case the characters will automatically loop over the
number groups. This automatic looping will begin at the global character
value (i.e., `par("pch")`) and recycle as necessary.}

\item{col}{plotting color. Character, integer, or vector of length equal to
the number of categories in the `by` variable. See `col`.}

\item{lty}{line type. Character, integer, or vector of length equal to the
number of categories in the `by` variable. See `lty`. In addition, users
can supply a special `lty = "by"` convenience argument, in which case the
line type will automatically loop over the number groups. This automatic
looping will begin at the global line type value (i.e., `par("lty")`) and
recycle as necessary.}

\item{par_restore}{a logical value indicating whether the `par` settings
prior to calling `plot2` should be restored on exit. Defaults to FALSE,
which makes it possible to add elements to the plot after it has been
drawn. However, note the the outer margins of the graphics device may have
been altered to make space for the `plot2` legend. Users can opt out of
this persistent behaviour by setting to TRUE instead. (Another option would
be calling `dev.off()` to reset all `par` settings to their defaults.)}

\item{ymin, ymax}{minimum and maximum coordinates of the point range. Only used when `type="pointrange"`.}

\item{formula}{a `formula` that may also include a grouping variable after a
"|", such as `y ~ x | z`. Note that the `formula` and `x` arguments should
not be specified in the same call.}

\item{subset, na.action, drop.unused.levels}{arguments passed to `model.frame`
when extracting the data from `formula` and `data`.}
}
\description{
`plot2` extends the functionality of base R's
  default (2D) `plot` function, particularly as it applies to scatter and
  line plots with grouped data. For example, `plot2` makes it easy to plot
  different categories of a dataset in a single function call and highlight
  these categories (groups) using modern colour palettes. Coincident with
  this grouping support, `plot2` also produces automatic legends with scope
  for further customization. While the package also offers several other
  minor enhancements, it tries as far as possible to be a drop-in replacement
  for the equivalent base plot function. Users should generally be able to
  swap a valid `plot` call with `plot2` without any changes to the output.
}
\examples{

# plot2 should be a drop-in replacement for (most) regular plot calls. For
# example:

par(mfrow = c(1, 2))
plot(0:10, main = "plot")
plot2(0:10, main = "plot2")

par(mfrow = c(2, 2))
plot(airquality$Day, airquality$Temp, main = "plot")
plot(Temp ~ Day, data = airquality, main = "plot (formula)")
#' plot2(airquality$Day, airquality$Temp, main = "plot2")
plot2(Temp ~ Day, data = airquality, main = "plot2 (formula)")

dev.off() # reset to default layout

# Unlike vanilla plot, however, plot2 allows you to characterize groups 
# (using either the `by` argument or equivalent `|` formula syntax).
# Notice that we also get an automatic legend.

plot2(airquality$Day, airquality$Temp, by = airquality$Month)
plot2(Temp ~ Day | Month, airquality)

# Use standard base plotting arguments to adjust features of your plot.
# For example, change `pch` (plot character) to get filled points.

plot2(
  Temp ~ Day | Month,
  data = airquality,
  pch = 16
)

# Converting to a grouped line plot is a simple matter of adjusting the
# `type` argument.

plot2(
  Temp ~ Day | Month,
  data = airquality,
  type = "l"
)

# The (automatic) legend position and look can be customized using
# appropriate arguments. Note the trailing "!" in the `legend` position
# argument below. This tells `plot2` to place the legend _outside_ the plot
# area.

plot2(
  Temp ~ Day | Month,
  data = airquality,
  type = "l",
  legend = legend("bottom!", title = "Month of the year", bty = "o")
)

# Regular legend position keywords without the exclamation point (i.e., for
# inside the plot area) should still work. Grouped density plot example:

plot2(
  density(airquality$Temp),
  by = airquality$Month, 
  legend = legend("topright", bty="o", title = "Month")
)

# The default group colours are inherited from either the "R4" or "Viridis"
# palettes, depending on the number of groups. However, all palettes listed
# by `palette.pals()` and `hcl.pals()` are supported as convenience strings,
# or users can supply a valid palette-generating function for finer control
# over transparency etc.

plot2(
  Temp ~ Day | Month,
  data = airquality,
  type = "l",
  palette = "Tableau 10"
)

# It's possible to further customize the look of you plots using familiar
# arguments and base plotting theme settings (e.g., via `par`).

par(family = "HersheySans")
plot2(
  Temp ~ Day | Month,
  data = airquality,
  type = "b", pch = 16,
  palette = palette.colors(palette = "Tableau 10", alpha = 0.5),
  main = "Daily temperatures by month",
  frame.plot = FALSE, grid = grid()
)

# For nice out-of-the-box themes, we recommend the `basetheme` package.

par(family = "") # revert global font change from above

library(basetheme)
basetheme("royal") # or "clean", "dark", "ink", "brutal", etc.

plot2(
  Temp ~ Day | Month,
  data = airquality,
  type = "b", pch = 15:19,
  palette = "Tropic",
  main = "Daily temperatures by month"
)

basetheme(NULL)  # back to default theme

}
