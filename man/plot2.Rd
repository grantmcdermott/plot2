% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot2.R
\name{plot2}
\alias{plot2}
\alias{plot2.default}
\alias{plot2.formula}
\title{Lightweight extension of the base R plotting function that supports
  automatic grouping and legend printing, and a several other enhancements.}
\usage{
plot2(x, ...)

\method{plot2}{default}(
  x,
  y = NULL,
  by = NULL,
  data = NULL,
  type = "p",
  xlim = NULL,
  ylim = NULL,
  main = NULL,
  sub = NULL,
  xlab = NULL,
  ylab = NULL,
  ann = par("ann"),
  axes = TRUE,
  frame.plot = axes,
  asp = NA,
  grid = NULL,
  palette = NULL,
  palette.args = list(),
  legend.position = NULL,
  legend.args = list(),
  pch = NULL,
  col = NULL,
  lty = NULL,
  ...
)

\method{plot2}{formula}(
  x = NULL,
  data = parent.frame(),
  type = "p",
  xlim = NULL,
  ylim = NULL,
  main = NULL,
  sub = NULL,
  xlab = NULL,
  ylab = NULL,
  ann = par("ann"),
  axes = TRUE,
  frame.plot = axes,
  asp = NA,
  grid = NULL,
  palette = NULL,
  palette.args = list(),
  legend.position = NULL,
  legend.args = list(),
  pch = NULL,
  col = NULL,
  lty = NULL,
  formula = NULL,
  subset = NULL,
  na.action = NULL,
  drop.unused.levels = TRUE,
  ...
)
}
\arguments{
\item{x, y}{the x and y arguments provide the x and y coordinates for the
plot. Any reasonable way of defining the coordinates is acceptable. See
the function xy.coords for details. If supplied separately, they must be
of the same length.}

\item{...}{other `graphical` parameters (see `par` and also the "Details"
section of `plot`).}

\item{by}{the grouping variable that you want to categorize (i.e., colour)
the plot by.}

\item{data}{a data.frame (or list) from which the variables in formula
should be taken. A matrix is converted to a data frame.}

\item{type}{1-character string giving the type of plot desired. The
following values are possible, for details, see plot: "p" for points, "l"
for lines, "b" for both points and lines, "c" for empty points joined by
lines, "o" for overplotted points and lines, "s" and "S" for stair steps
and "h" for histogram-like vertical lines. Finally, "n" does not produce
any points or lines.}

\item{xlim}{the x limits (x1, x2) of the plot. Note that x1 > x2 is allowed
and leads to a ‘reversed axis’. The default value, NULL, indicates that
the range of the `finite` values to be plotted should be used.}

\item{ylim}{the y limits of the plot.}

\item{main}{a main title for the plot, see also `title`.}

\item{sub}{a subtitle for the plot.}

\item{xlab}{a label for the x axis, defaults to a description of x.}

\item{ylab}{a label for the y axis, defaults to a description of y.}

\item{ann}{a logical value indicating whether the default annotation (title
and x and y axis labels) should appear on the plot.}

\item{axes}{a logical value indicating whether both axes should be drawn on
the plot. Use `graphical parameter` "xaxt" or "yaxt" to suppress just one of
the axes.}

\item{frame.plot}{a logical indicating whether a box should be drawn around
the plot.}

\item{asp}{the y/xy/x aspect ratio, see `plot.window`.}

\item{grid}{a panel grid plotting function like `grid()`. This argument
replaces the `panel.first` and `panel.last` arguments from base `plot()`
and tries to make the process more seemless with better default behaviour.}

\item{palette}{a string corresponding to one of the supported palettes
listed by either `palette.pals()` or `hcl.pals()`.}

\item{palette.args}{list of additional arguments passed to either
`palette.colors()` or `hcl.colors`, depending on which string was passed
to the `palette` argument. For example, you might have "recycle = TRUE"
if using a `palette.colors` palette.}

\item{legend.position}{one of the position keywords supported by `legend`.
In addition, `plot2` supports adding an exclamation point to two keywords
in particular: "bottom!" and "right!". These will place the legend outside
of the plotting area and adjust the margins of the plot accordingly. If no
legend is desired, then the user can also specify "none".}

\item{legend.args}{list of additional arguments passed on to `legend`. At
the moment, only "bty", "horiz", "xpd", and "title" are supported.}

\item{pch}{plotting "character", i.e., symbol to use. Character, integer, or vector of length equal to the number of categories in the `by` variable. See `pch`.}

\item{col}{plotting color. Character, integer, or vector of length equal to the number of categories in the `by` variable. See `col`.}

\item{lty}{line type. Character, integer, or vector of length equal to the number of categories in the `by` variable. See `lty`.}

\item{formula}{a `formula` that may also include a grouping variable after a
"|", such as `y ~ x | z`. Note that the `formula` and `x` arguments should
not be specified in the same call.}

\item{subset, na.action, drop.unused.levels}{arguments passed to `model.frame`
when extracting the data from `formula` and `data`.}
}
\description{
`plot2` extends the functionality of base R's
  default (2D) `plot` function, particularly as it applies to scatter and
  line plots with grouped data. For example, `plot2` makes it easy to plot
  different categories of a dataset in a single function call and highlight
  these categories (groups) using modern colour palettes. Coincident with
  this grouping support, `plot2` also produces automatic legends with scope
  for further customization. While the package also offers several other
  minor enhancements, it tries as far as possible to be a drop-in replacement
  for the equivalent base plot function. Users should generally be able to
  swap a valid `plot` call with `plot2` without any changes to the output.
}
\examples{

# plot2 should be a drop-in replacement for (most) regular plot calls. For
# example:

plot(0:10)
plot2(0:10)

plot(airquality$Day, airquality$Temp)
plot2(airquality$Day, airquality$Temp) # same

plot(Temp ~ Day, data = airquality) # base formula method
plot2(Temp ~ Day, data = airquality) # same

# Unlike vanilla plot, however, plot2 allows you to characterize groups 
# (using either the `by` argument or equivalent `|` formula syntax).
# Notice that we also get an automatic legend.

plot2(airquality$Day, airquality$Temp, by = airquality$Month)
plot2(Temp ~ Day | Month, airquality)

# The legend can be customized and automatically responds to plot element
# changes. Note the use of "!" in the `legend.position` argument to place
# the legend outside the plot area.

plot2( 
  Temp ~ Day | Month, airquality,
  type = "l",
  legend.position = "right!"
)

# The default group colours are either "Okabe-Ito" or "Viridis", depending
# on the number of groups. But this is easily changed with the palette
# argument. Note that all palettes supported by `palette.pals()` and 
# `hcl.pals()` are supported out-of-the-box. Just pass any of the string
# values generated by either of these functions.

plot2(
  Temp ~ Day | Month, airquality,
  type = "l",
  legend.position = "right!",
  palette = "Tropic"
)

# Its possible to add a lot more customization to your plots using the
# accompanying legend.args and palette.args arguments. Here's a quick
# example, where we also show off the enhanced `grid` argument.

plot2(
  Temp ~ Day | Month, airquality,
  type = "b", pch = 16,
  grid = grid(), frame.plot = FALSE,
  legend.position = "right!", legend.args = list(bty = "n", title = NULL),
  palette = "Tableau 10", palette.args = list(alpha = 0.5)
)

# Because plot2 is ultimately just a wrapper around regular plot, any
# theming elements set by `par` etc. should carry over. For nice
# out-of-the-box themes, I recommend the `basetheme` package.

library(basetheme)
basetheme("royal") # or "clean", "dark", "ink", "brutal", etc.

plot2(
  Temp ~ Day | Month, airquality,
  type = "b", pch = 17,
  grid = grid(), frame.plot = FALSE,
  legend.position = "right!", legend.args = list(bty = "n", title = NULL),
  palette = "Tropic", palette.args = list(alpha = 0.8)
)

basetheme(NULL) # back to default

}
