% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot2.R
\name{plot2}
\alias{plot2}
\alias{plot2.default}
\alias{plot2.formula}
\alias{plot2.density}
\title{Lightweight extension of the base R plotting function}
\usage{
plot2(x, ...)

\method{plot2}{default}(
  x,
  y = NULL,
  by = NULL,
  facet = NULL,
  facet.args = NULL,
  data = NULL,
  type = "p",
  xlim = NULL,
  ylim = NULL,
  log = "",
  main = NULL,
  sub = NULL,
  xlab = NULL,
  ylab = NULL,
  ann = par("ann"),
  axes = TRUE,
  frame.plot = axes,
  asp = NA,
  grid = NULL,
  palette = NULL,
  legend = NULL,
  pch = NULL,
  lty = NULL,
  col = NULL,
  bg = NULL,
  fill = NULL,
  cex = 1,
  par_restore = FALSE,
  ymin = NULL,
  ymax = NULL,
  ribbon_alpha = 0.2,
  add = FALSE,
  ...
)

\method{plot2}{formula}(
  x = NULL,
  data = parent.frame(),
  type = "p",
  xlim = NULL,
  ylim = NULL,
  main = NULL,
  sub = NULL,
  xlab = NULL,
  ylab = NULL,
  ann = par("ann"),
  axes = TRUE,
  frame.plot = axes,
  asp = NA,
  grid = NULL,
  pch = NULL,
  col = NULL,
  lty = NULL,
  par_restore = FALSE,
  formula = NULL,
  subset = NULL,
  na.action = NULL,
  drop.unused.levels = TRUE,
  ...
)

\method{plot2}{density}(
  x = NULL,
  by = NULL,
  facet = NULL,
  type = c("l", "area"),
  xlim = NULL,
  ylim = NULL,
  main = NULL,
  sub = NULL,
  xlab = NULL,
  ylab = NULL,
  ann = par("ann"),
  axes = TRUE,
  frame.plot = axes,
  asp = NA,
  grid = NULL,
  pch = NULL,
  col = NULL,
  lty = NULL,
  bg = NULL,
  fill = NULL,
  par_restore = FALSE,
  ...
)
}
\arguments{
\item{x, y}{the x and y arguments provide the x and y coordinates for the
plot. Any reasonable way of defining the coordinates is acceptable. See
the function xy.coords for details. If supplied separately, they must be
of the same length.}

\item{...}{other \code{graphical} parameters (see \code{par} and also the "Details"
section of \code{plot}).}

\item{by}{grouping variable(s). By default, groups will be represented
through colouring of the plot elements. However, this can be turned off
and other plot parameters (e.g., line types) can also take on grouping
behaviour via the special "by" keyword. See Examples.}

\item{facet}{the faceting variable that you want arrange separate plot
windows by. To facet by multiple variables, simply interact them, e.g.
with \code{interaction(facet_var1, facet_var2)}. Also accepts the special "by"
convenience keyword, in which case facets will match the grouping
variable(s) above.}

\item{facet.args}{an optional list of arguments for controlling faceting
behaviour. (Ignored if \code{facet} is NULL.) Currently only the following are
supported:
\itemize{
\item \code{nrow}, \code{ncol} for overriding the default "square" facet window
arrangement. Only one of these should be specified; if not then the former
will supersede the latter.
\item \code{fmar} a vector of form \code{c(b,l,t,r)} for controlling the base margin
between facets in terms of lines. Defaults to the value of \code{par2("fmar")},
which should be \code{c(1,1,1,1)}, i.e. a single line of padding around each
individual facet, assuming it hasn't been overridden by the user as part
their global \code{par2} settings. Note some automatic adjustments are made for
certain layouts, and depending on whether the plot is framed or not, to
reduce excess whitespace. See \code{\link[plot2]{par2}} for more details.
}}

\item{data}{a data.frame (or list) from which the variables in formula
should be taken. A matrix is converted to a data frame.}

\item{type}{character string giving the type of plot desired. Options are:
\itemize{
\item The same set of 1-character values supported by plot: "p" for points, "l"
for lines, "b" for both points and lines, "c" for empty points joined by
lines, "o" for overplotted points and lines, "s" and "S" for stair steps
and "h" for histogram-like vertical lines. "n" does not produce
any points or lines.
\item Additional plot2 types: "density" for densities, "pointrange" or
"errorbar" for segement intervals, and "ribbon" or "area" for polygon
intervals (where area plots are a special case of ribbon plots with \code{ymin}
set to 0 and \code{ymax} set to \code{y}; see below).
}}

\item{xlim}{the x limits (x1, x2) of the plot. Note that x1 > x2 is allowed
and leads to a ‘reversed axis’. The default value, NULL, indicates that
the range of the \code{finite} values to be plotted should be used.}

\item{ylim}{the y limits of the plot.}

\item{log}{a character string which contains "x" if the x axis is to be
logarithmic, "y" if the y axis is to be logarithmic and "xy" or "yx" if
both axes are to be logarithmic.}

\item{main}{a main title for the plot, see also \code{title}.}

\item{sub}{a subtitle for the plot.}

\item{xlab}{a label for the x axis, defaults to a description of x.}

\item{ylab}{a label for the y axis, defaults to a description of y.}

\item{ann}{a logical value indicating whether the default annotation (title
and x and y axis labels) should appear on the plot.}

\item{axes}{a logical value indicating whether both axes should be drawn on
the plot. Use \verb{graphical parameter} "xaxt" or "yaxt" to suppress just one of
the axes.}

\item{frame.plot}{a logical indicating whether a box should be drawn around
the plot. Can also use \code{frame} as an acceptable argument alias.}

\item{asp}{the y/xy/x aspect ratio, see \code{plot.window}.}

\item{grid}{argument for plotting a background panel grid, one of either:
\itemize{
\item a logical (i.e., \code{TRUE} to draw the grid), or
\item a panel grid plotting function like \code{grid()}.
Note that this argument replaces the \code{panel.first} and \code{panel.last}
arguments from base \code{plot()} and tries to make the process more seamless
with better default behaviour. Default is not to draw a grid.
}}

\item{palette}{one of the following options:
\itemize{
\item NULL (default), in which case the palette will be determined by the
the user's default graphics palette, e.g. "R4". See \code{?palette()}. Note
that some internal checking is done to make sure that resulting colours
match the number of groups. For larger group numbers, the "viridis"
palette will be used instead.
\item A convenience string corresponding to one of the many palettes listed by
either \code{palette.pals()} or \code{hcl.pals()}. Note that the string can be
case-insensitive (e.g., "Okabe-Ito" and "okabe-ito" are both valid).
\item A palette-generating function. This can be "bare" (e.g.,
\code{palette.colors}) or "closed" with a set of named arguments (e.g.,
\code{palette.colors(palette = "Okabe-Ito", alpha = 0.5)}). Note that any
unnamed arguments will be ignored and the key \code{n} argument, denoting the
number of colours, will automatically be spliced in as the number of
groups.
}}

\item{legend}{one of the following options:
\itemize{
\item NULL (default), in which case the legend will be determined by the
grouping variable. If there is no group variable (i.e., \code{by} is NULL) then
no legend is drawn. If a grouping variable is detected, then an automatic
legend is drawn to the \emph{outer} right of the plotting area. Note that the
legend title and categories will automatically be inferred from the \code{by}
argument and underlying data.
\item A convenience string indicating the legend position. The string should
correspond to one of the position keywords supported by the base \code{legend}
function, e.g. "right", "topleft", "bottom", etc. In addition, \code{plot2}
supports adding a trailing exclamation point to these keywords, e.g.
"right!", "topleft!", or "bottom!". This will place the legend \emph{outside}
the plotting area and adjust the margins of the plot accordingly. Finally,
users can also turn off any legend printing by specifying "none".
\item Logical value, where TRUE corresponds to the default case above (same
effect as specifying NULL) and FALSE turns the legend off (same effect as
specifying "none").
\item A list or, equivalently, a dedicated \code{legend()} function with supported
legend arguments, e.g. "bty", "horiz", and so forth.
}}

\item{pch}{plotting "character", i.e., symbol to use. Character, integer, or
vector of length equal to the number of categories in the \code{by} variable.
See \code{pch}. In addition, users can supply a special \code{pch = "by"} convenience
argument, in which case the characters will automatically loop over the
number groups. This automatic looping will begin at the global character
value (i.e., \code{par("pch")}) and recycle as necessary.}

\item{lty}{line type. Character, integer, or vector of length equal to the
number of categories in the \code{by} variable. See \code{lty}. In addition, users
can supply a special \code{lty = "by"} convenience argument, in which case the
line type will automatically loop over the number groups. This automatic
looping will begin at the global line type value (i.e., \code{par("lty")}) and
recycle as necessary.}

\item{col}{plotting color. Character, integer, or vector of length equal to
the number of categories in the \code{by} variable. See \code{col}. Note that the
default behaviour in \code{plot2} is to vary group colors along any variables
declared in the \code{by} argument. Thus, specifying colors manually should not
be necessary unless users wish to override the automatic colors produced by
this grouping process. Typically, this would only be done if grouping
features are deferred to some other graphical parameter (i.e., passing the
"by" keyword to one of \code{pch}, \code{lty}, or \code{bg}; see below.)}

\item{bg}{background fill color for the open plot symbols 21:25 (see
\code{points.default}), as well as ribbon and area plot types. For the latter
group---including filled density plots---an automatic alpha transparency
adjustment will be applied (see the \code{ribbon_alpha} argument further below).
Users can also supply a special \code{bg = "by"} convenience argument, in which
case the background fill will inherit the automatic group coloring
intended for the \code{col} argument. Note that this grouped inheritance will
persist even if the \code{col} defaults are themselves overridden. For example,
\code{plot2(y ~ x | z, data = fakedata, pch = 22, col = "blue", bg = "by")}
will yield filled squares with a blue border.}

\item{fill}{alias for \code{bg}. If non-NULL values for both \code{bg} and \code{fill} are
provided, then the latter will be ignored in favour of the former.}

\item{cex}{character expansion. A numerical vector (can be a single value)
giving the amount by which plotting characters and symbols should be scaled
relative to the default. Note that NULL is equivalent to 1.0, while NA
renders the characters invisible.}

\item{par_restore}{a logical value indicating whether the \code{par} settings
prior to calling \code{plot2} should be restored on exit. Defaults to FALSE,
which makes it possible to add elements to the plot after it has been
drawn. However, note the the outer margins of the graphics device may have
been altered to make space for the \code{plot2} legend. Users can opt out of
this persistent behaviour by setting to TRUE instead. (Another option would
be calling \code{dev.off()} to reset all \code{par} settings to their defaults.)}

\item{ymin, ymax}{minimum and maximum coordinates of interval plot types. Only
used when the \code{type} argument is one of "pointrange", "errorbar", or
"ribbon".}

\item{ribbon_alpha}{numeric factor modifying the opacity alpha of any ribbon
shading; typically in \verb{[0, 1]}. Default value is 0.2. Only used when
\code{type = "ribbon"}, or when the \code{bg} fill argument is specified in a density
plot (since filled density plots are converted to ribbon plots internally).}

\item{add}{logical. If TRUE, then elements are added to the current plot rather
than drawing a new plot window. Note that the automatic legend for the
added elements will be turned off.}

\item{formula}{a \code{formula} that optionally includes grouping variable(s)
after a vertical bar, e.g. \code{y ~ x | z}. One-sided formulae are also
permitted, e.g. \code{~ y | z}. Note that the \code{formula} and \code{x} arguments
should not be specified in the same call.}

\item{subset, na.action, drop.unused.levels}{arguments passed to \code{model.frame}
when extracting the data from \code{formula} and \code{data}.}
}
\description{
Extends base R's
default plotting function, particularly as it applies to scatter and
line plots with grouped data. For example, \code{plot2} makes it easy to plot
different categories of a dataset in a single function call and highlight
these categories (groups) using modern colour palettes. Coincident with
this grouping support, \code{plot2} also produces automatic legends with scope
for further customization. While the package also offers several other
enhancements, it tries as far as possible to be a drop-in replacement
for the equivalent base plot function. Users should generally be able to
swap a valid \code{plot} call with \code{plot2} without any changes to the output.
}
\examples{

# save graphics parameters to restore them later
op = par()


# plot2 should be a drop-in replacement for (most) regular plot calls. For
# example:

par(mfrow = c(1, 2))
plot(0:10, main = "plot")
plot2(0:10, main = "plot2")

# restore graphics parameters
par(op)  

# Unlike vanilla plot, however, plot2 allows you to characterize groups 
# (using either the `by` argument or equivalent `|` formula syntax).
# Notice that we also get an automatic legend.

plot2(airquality$Day, airquality$Temp, by = airquality$Month)
plot2(Temp ~ Day | Month, airquality)

# Use standard base plotting arguments to adjust features of your plot.
# For example, change `pch` (plot character) to get filled points.

plot2(
  Temp ~ Day | Month,
  data = airquality,
  pch = 16
)

# Converting to a grouped line plot is a simple matter of adjusting the
# `type` argument.

plot2(
  Temp ~ Day | Month,
  data = airquality,
  type = "l"
)

# Similarly for other plot types, including some additional ones provided
# directly by plot2, e.g. density plots or internal plots (ribbons, 
# pointranges, etc.)

plot2(
  ~ Temp | Month,
  data = airquality,
  type = "density",
  fill = "by"
)

# Facet plots are supported too. Facets can be drawn on their own...

with(
  airquality,
  plot2(
  x = Day, y = Temp,
  facet = factor(Month, labels = month.abb[unique(Month)]),
  type = "area",
  main = "Temperatures by month"
  )
)

# ... or combined/contrasted with the by (colour) grouping.

airquality2 = transform(airquality, Summer = Month \%in\% 6:8)
with(
  airquality2,
  plot2(
  x = Day, y = Temp,
  by = Summer,
  facet = factor(Month, labels = month.abb[unique(Month)]),
  type = "area",
  palette = "dark2",
  main = "Temperatures by month and season"
  )
)

# Users can override the default square window arrangement by passing `nrow`
# or `ncol` to the helper facet.args argument. Note that we can also reduce
# axis label repetition across facets by turning the plot frame off.

airquality2 = transform(airquality, Summer = Month \%in\% 6:8)
with(
  airquality2,
  plot2(
  x = Day, y = Temp,
  by = Summer,
  facet = factor(Month, labels = month.abb[unique(Month)]),
  facet.args = list(nrow = 1),
  frame = FALSE,
  type = "area",
  palette = "dark2",
  main = "Temperatures by month and season"
  )
)

# The (automatic) legend position and look can be customized using
# appropriate arguments. Note the trailing "!" in the `legend` position
# argument below. This tells `plot2` to place the legend _outside_ the plot
# area.

plot2(
  Temp ~ Day | Month,
  data = airquality,
  type = "l",
  legend = legend("bottom!", title = "Month of the year", bty = "o")
)

# The default group colours are inherited from either the "R4" or "Viridis"
# palettes, depending on the number of groups. However, all palettes listed
# by `palette.pals()` and `hcl.pals()` are supported as convenience strings,
# or users can supply a valid palette-generating function for finer control
# over transparency etc.

plot2(
  Temp ~ Day | Month,
  data = airquality,
  type = "l",
  palette = "tableau"
)

# It's possible to further customize the look of you plots using familiar
# arguments and base plotting theme settings (e.g., via `par`).

par(family = "HersheySans", las = 1)
plot2(
  Temp ~ Day | Month,
  data = airquality,
  type = "b", pch = 16,
  palette = palette.colors(palette = "tableau", alpha = 0.5),
  main = "Daily temperatures by month",
  frame = FALSE, grid = TRUE
)

par(family = "") # revert global font change from above

}
