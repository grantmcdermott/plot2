---
title: "Themes"
format: html
engine: knitr
vignette: |
  %\VignetteIndexEntry{Tutorial}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r include=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  # fig.path = "man/figures/README-",
  out.width = "70%",
  fig.width = 8,
  dpi = 300,
  asp = 0.625
)
```
# `tinytheme()`

The `tinytheme()` function applies groups of graphical settings to plots, according to pre-defined styles.  

```{r}
library(tinyplot)

tinytheme("minimal")

tinyplot(Sepal.Width ~ Sepal.Length | Species,
  facet = ~Species,
  data = iris,
  main = "Title of this plot",
  sub = "A smaller subtitle",
  pch = 16)
```

The changes made by `tinytheme()` are persistent, and apply to all subsequent `tinyplot()` calls.

```{r}
tinyplot(mpg ~ hp, data = mtcars, main = "Cars")
```

To reset graphical parameters to factory defaults, call  `tinytheme()` without arguments.

```{r}
tinytheme()
```

The `tinytheme()` function accepts any graphical parameter supported by `par()` and `tpar()`, and applies them in persistent fashion.

```{r}
#| layout-ncol: 2
tinytheme("ipsum", family = "serif", pch = 2, col.axis = "red")
tinyplot(mpg ~ hp, data = mtcars, main = "Cars (Part I)")
tinyplot(hp ~ mpg, data = mtcars, main = "Cars (Part II)")
```

```{r}
# reset
tinytheme()
```

# Gallery

**tinyplot** comes with a number of built-in themes, which can be applied using the `tinytheme()` function. The following examples demonstrate the available themes.

Please contribute new themes by [opening a Pull Request on Github.](https://github.com/grantmcdermott/tinyplot)

## Default

```{r}
p = function() {
  tinyplot(Sepal.Width ~ Sepal.Length | Species,
    facet = ~Species,
    data = iris,
    main = "Title of this plot",
    sub = "A smaller subtitle",
    pch = 16)
}

p()
```

## ipsum

The "ipsum" theme is inspired by [**hrbrthemes** for **ggplot2**.](https://cran.r-project.org/web/packages/hrbrthemes/index.html)

```{r}
tinytheme("ipsum")
p()
```

## bw

```{r}
tinytheme("bw")
p()
```

## classic

```{r}
tinytheme("classic")
p()
```

## minimal

```{r}
tinytheme("minimal")
p()
```

## dark

```{r}
tinytheme("dark")
p()
```


```{r}
# Reset to default theme.
tinytheme()
```

# Custom themes

Users can define custom themes by setting the theme to "default" and passing additional graphical parameters to `tinytheme()`.

```{r}
tinytheme("default", font.main = 3, col = "red")
p()
```

```{r}
# Reset to default theme.
tinytheme()
```


# `par()` and `tpar()`

Customizing your plots further is straightforward, whether that is done directly
by changing `tinyplot` arguments for a single plot, or by calling `tintheme()`.
For setting global parameters, users can invoke the standard `par()`
arguments. But for improved convenience and integration with the rest of the
package, we recommend that users instead go via
[`tpar()`](https://grantmcdermott.com/tinyplot/man/tpar.html), which is an
extended version of `par()` that supports all of the latter's parameters plus
some `tinyplot`-specific ones. Here's a quick penultimate example, where we
impose several global changes (e.g., rotated axis labels, removed plot frame to
get Tufte-style floating axes, etc.) before drawing the plot. 
change our point character, tick labels, and font family globally, before adding
some transparency to our colour palette, and use Tufte-style floating axes with
a background panel grid.

```{r hershey_plus}
op = tpar(
  bty    = "n",           # No box (frame) around the plot 
  family = "HersheySans", # Use R's Hershey font instead of Arial default
  grid   = TRUE,          # Add a background grid
  las    = 1,             # Horizontal axis tick labels
  pch    = 16             # Filled points as default
)

tinyplot(
  mpg ~ wt | cyl, 
  data = sort_by(transform(mtcars, cyl = factor(cyl)), ~wt),
  type = "b",
  alpha = 0.5
)
```

_Note: For access to a much wider variety of fonts, you might consider the
**showtext** package
([link](https://cran.r-project.org/web/packages/showtext/vignettes/introduction.html))._

The graphical parameters set by `par()` stay in force as long as a graphical device stays open. On the other hand, these parameters are reset when the plotting window is closed or, for example, when executing a new code chunk in a Quarto notebook. **tinyplot** offers an extended version of this function---`tpar()`---which offers additional **tinyplot**-specific visual parameters (See `?tpar` for a complete list). Graphical parameters set by `tpar()` can persist across devices and code chunks via a "hook" mechanism (see `?setHook`). For this, we use the `hook=TRUE` argument. Without this feature, parameters are reset in every code chunk.

```{r}
par(col = "red", pch = 4)
tinyplot(mpg ~ hp, data = mtcars)
```
```{r}
tinyplot(wt ~ qsec, data = mtcars)
```

With the `hook=TRUE` argument, the graphical parameters are persistent.

```{r}
tpar(col = "red", pch = 4, hook = TRUE)
tinyplot(mpg ~ hp, data = mtcars)
```
```{r}
tinyplot(wt ~ qsec, data = mtcars)
```

```{r}
# reset to default theme
tinytheme()
```
